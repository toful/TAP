List exercises using recursion



-- Write a stack recursive function lower3(list) that adds all numbers whose values are lower than 3 and they
-- appear in one integer list.


------------------------------------------------


-- Write a tail recursive  function that calculates the higher element of integer list.


------------------------------------------------


-- Create list_integers(n, list) function. It returns one list with integers including between 0 and n.


------------------------------------------------


-- Create list_between(begin, end, listX) function. It returns one list that contains integers between begin
-- and end of listX.


------------------------------------------------


-- Modify exercise 4 in order to only print the multiples of 2.


------------------------------------------------


-- Implement "digit" function that receives an integer and returns a list of digits.
-- Implement both tail and stack recursion modes.
-- ex. digit 3645 --> [3,6,4,5]


------------------------------------------------


-- Implement "add_div" function that returns the addition of all its divisors but excluding himself.
-- Implement both tail and stack recursion modes.


------------------------------------------------


-- Implement function "power" that receives one integer and the number that we want to raise.
-- It returns the result of applying the operation.
-- Implement both tail and stack recursion modes.
-- ex.   Main> power 3 4
--             81 :: Integer


------------------------------------------------


-- Implement a central function that receives a list by parameter and returns one structure with three elements:
-- The first is the first element of the list.
-- The second is a list whose elements are lower than first element.
-- The third is a list whose elements are higher than fist element.
-- Use tail recursion. The elements should keep the initial order.
-- ex.   Main> central "362741"
--             ('3',"21","674") :: (Char,[Char],[Char])


------------------------------------------------


-- Implement "hexadecimal" function that receives an integer and generates the corresponding hexadecimal number.
-- (number in base 16 in the form of string).
-- You can use 'hexa x' function. From decimal number it returns the string with his corresponding decimal number.
-- Use tail recursion.



-- ex. Main > hexadecimal 200
--            "c8" :: [Char]
-- ex. Main > hexadecimal 0
--            "0" :: [Char]


------------------------------------------------


-- Implement "decimal" function that receives a String in form of hexadecimal number.
-- and returns an integer with his corresponding decimal number.
-- You can use 'deci x' function. From one string it returns his decimal number.
-- Use stack recursion.




-- CLUE:  You can use mirror function to change the order of String
-- ex. Main > decimal "3a2"
--            930 :: Integer

------------------------------------------------


-- Implement "prime" function that receives one integer and returns a boolean that indicates if the number is prime or not.
-- ex. Main> prime 127
--     True :: Bool


------------------------------------------------


-- Implement "factorize" function that receives one integer number and returns a list with his ordered factoring.
-- (the list of minimum prime numbers that it can factorize).
-- ej. Main> factorize 8
--     [2,2,2] :: [Integer]
-- ej. Main> factorize 100
--     [2,2,5,5] :: [Integer]


------------------------------------------------


-- Implement expand_pow_2" that receives a integer list with at least one element.
-- If size of the list isn't equal to a power of 2 (0,1,2,4,8,16,...). It expands the list adding 0 until
-- it has power of 2 size. -- You can use "length" function.

-- ex. Main> expand_pow_2 [1,2,3,4]
--          [1,2,3,4] :: [Integer]
-- ex. Main> expand_pow_2 [1,2,3,4,5]
--          [1,2,3,4,5,0,0,0] :: [Integer]


------------------------------------------------


-- Implement "order" function that receives a list of strings and returns a list with all elements ordered alphabetically.
-- ex. Main> order_alph ["enjoy","this","day","until","one","exam","ruined","it"]
--            [ "day", "enjoy", "exam", "it", " one", "ruined", "this","until"] :: [[Char]]


------------------------------------------------

-- Create "fact_stack" and "fact_cum" functions that receives an integer and return the result of apply factorial function.
-- The first is in stack recursion and the second is in cumulative or tail recursion.

                   
-- ej. Main> fact_stack 4
--     24 :: Integer
-- ej. Main> fact_cum 6
--     720 :: Integer


------------------------------------------------


-- Create "inverse_center" function that receives a String and returns a new string where the first and
-- last letter keep their positions but the rest are reversed.

-- ex. Main> inverse_center "haskell"
--     "hleksal" :: [Char]   
-- ex. Main> inverse_center "exam"
--     "eaxm" :: [Char]


------------------------------------------------


-- Implement "binary" function that receives one integer and it converts the integer in its corresponding binary number
-- (number in base 2 as String)
-- You can use 'char x' function that receives one number end returns its character.
-- Use tail recursion.


-- ex. Main> binary 12
--     "1100" :: [Char]

------------------------------------------------


-- Implement "decimal" function that receives a String, in form of binary number, and returns an integer with its corresponding decimal number.
-- You can use 'int x' function that receives a character and returns its associated int.
-- Use stack recursion



-- ex. Main> decimal "0"
--     0 :: Integer    
-- ex. Main> decimal "101011"
--     43 :: Integer         


------------------------------------------------


-- Implement "addition_pow2" thar receives one number and returns the same number in form of power of 2.
-- To simplify, we suppose that the value of the higher power is 9

-- ex. Main> addition_pow2 0
--     "0" :: [Char]    
-- ex. Main> addition_pow2 9
--     "2^3 + 2^0" :: [Char]
-- ex. Main> addition_pow2 13
--     "2^3 + 2^2 + 2^0" :: [Char]


------------------------------------------------


-- Implement "next_prime" function that receives one integer and returns the next prime number.
-- If we introduce one prime number, the result will be the next prime number, never the same one.

-- ex. Main> next_prime 127
--     131 :: Integer


------------------------------------------------


-- Implement "order_letters" that receives one string and returns other string with letters ordered alphabetically, removing blank spaces.

-- ex. Main> order_letter "The algorithm of order in Haskell is very important"
-- "aaadeeeefghhhiiiiklllmmnnooooprrrrrssttttvy" :: [Char]

