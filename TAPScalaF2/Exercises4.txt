-- EXERCISES TREES:
------------------------------


-- Create one function that calculate the maximum element of one tree.


------------------------------


-- Create a function that indicate if one element belong to one tree.


------------------------------


-- Create one function that calculate the addition of elements on one tree


------------------------------


-- Create a function that calculate the height of one tree.


------------------------------


-- a) Implement "oldest_child" function that return one boolean that indicate:
-- For all numerical tree, the child's value is higher that father's value.
-- b) Implement "make_greatest" function that receive one tree
-- It modify child's values that it was lower that its direct fathers.
-- This value is father's values +1


-- ex:     4                          4
--       /   \                      /   \
--      6     3     becomes:    6     5
--     / \   / \                  / \   / \
--    8   4 9   5                8   7 9   6

-- Use tree definition:

data Tree a = Plant ((Tree a),a, (Tree a)) | Anil deriving (Eq)
instance Show a => Show(Tree a) where
  show Anil = "o"
  show (Plant(a,b,c))= "<" ++ show a ++ "|" ++ show b ++ "|" ++ show c ++ ">"


------------------------------


-- a) Implement "tree_condi" that return how many nodes from tree accomplish one particular boolean condition.
-- b) Implement "to_prune" function that receive a condition and
-- remove subtrees of nodes that not accomplish the condition.
-- c) Use partial parametrize in order to prune all multiple 3 nodes.



-- ex: tree_condi (>5) (Plant(Plant(Anil,7,Anil),4,Plant(Anil,3,Anil))) --> 1
-- ex: to_prune (>5) (Plant(Plant(Anil,7,Anil),4,Plant(Anil,3,Anil))) --> <o|4|<o|3|o>>
-- ex: to_prune (Plant(Plant(Anil,7,Anil),4,Plant(Anil,3,Anil))) --> <<o|7|o>|4|o>


------------------------------


-- Create "majorty_condi" function, that receive one condition and
-- it indicate if half on elements accomplish the condition.
-- You can use "tree_condi" function of previous exercise.

-- ex. Main> majorty_condi (>5) (Plant(Plant(Plant(Anil,3,Anil),6,Plant(Anil,2,Anil)),4,(Plant(Anil,9,Anil))))
--           False :: Bool


------------------------------


-- Implement "majority_of_multiple_3" that indicate if the majority nodes of one tree are multiple of 3.
-- Do that with partial parametrize of previous exercise

-- ex.  Main> tree_condi (>5) (Plant(Plant((Plant(Anil,3,Anil),6,(Plant(Anil,2,Anil)),4,(Plant(Anil,9,Anil))))
-- 2 :: Integer


------------------------------


-- Implement "depth" function that receive one tree and return one integer with maximum depth of the tree.

-- ex.  Main> depth (Plant(Plant(Plant(Plant(Anil,6,Anil),4,Anil),2,Anil),1,Plant(Anil,3,Plant(Anil,5,Anil))))
-- 4 :: Integer


------------------------------


-- Implement "tree_prime" function that return one boolean that indicate if all nodes are prime numbers.
-- Use can use "prime" function


-- ex. Main> tree_prime (Plant (Plant (Anil,3,Anil),7,Plant (Anil,5,Anil)))
--           True :: Bool
-- ex. Main> tree_prime (Plant (Plant (Anil,4,Anil),8,Plant (Anil,5,Anil)))
--           False :: Bool


------------------------------


-- Implement "make_tree_prime" that receive one numeric tree and it transform not-prime nodes in the next prime number.
-- You can use "prime" function

-- ex. Main> make_tree_prime (Plant (Plant (Anil,4,Anil),8,Plant (Anil,5,Anil)))
--           <<o|5|o>|11|<o|5|o>> :: Tree Integer


------------------------------


-- Implement "create_trees" function that receive one integer list and
-- return one integer tree list of a single element (both child and Anil)


-- ex. Main> create_trees [1,2,3]
--           [<o|1|o>,<o|2|o>,<o|3|o>] :: [Tree Integer]

------------------------------


-- Implement "add_trees" function that receive two trees and return new addition tree.
-- We define the addition of two trees a and b like new tree where:
-- the left subtree is a,
-- the right subtree is b and
-- the node is the addition of principal nodes of a and b.
-- In case that some of two trees are empty tree, its value is 0.
-- In case od addition two empty trees, the result is empty tree.


-- ex. Main> add_trees (Plant(Anil,2,Anil)) (Plant(Anil,4,Anil))
--           <<o|2|o>|6|<o|4|o>> :: Arbol Integer
-- ex. Main> add_trees (Plant(Plant(Anil,1,Anil),2,Plant(Anil,1,Anil))) (Plant(Anil,4,Anil))
--           <<<o|1|o>|2|<o|1|o>>|6|<o|4|o>> :: Tree Integer
-- ex. Main> add_trees Anil Anil
--           o :: Tree Integer
-- ex. Main> add_trees Anil (Plant(Anil,3,Anil))
--           <o|3|<o|3|o>> :: Tree Integer


------------------------------


-- Implement "add_tree_list" function that receive one tree list and it apply addition two to two.
-- (The first with the second, the third with the fourth, etc).
-- Generating new list with results. In case that the size of list is odd, the last tree is added to empty tree Anil.

-- ex. Main> add_tree_list [Plant(Anil,4,Anil),Plant(Anil,5,Anil),Plant(Anil,3,Anil)]
-- [<<o|4|o>|9|<o|5|o>>,<<o|3|o>|3|o>] :: [Tree Integer]
-- ex. Main> add_tree_list [Plant(Anil,4,Anil),Plant(Anil,5,Anil),Plant(Anil,3,Anil),Plant(Anil,2,Anil)]
--           [<<o|4|o>|9|<o|5|o>>,<<o|3|o>|5|<o|2|o>>] :: [Tree Integer]


------------------------------


-- Implement "create_addition_tree" as follows:
--      a)From one integer list, you expand it to its power of 2 with "expand_pow_2".
--      b)Use "create_trees" in order to change the integer list to tree list.
--      c)Apply recursively "add_tree_list" until there is only one tree in a list.
--      d)You extract the tree of the list and return it as result.


-- ex. Main> create_addition_tree [1,2,3]
--     <<<o|1|o>|3|<o|2|o>>|6|<<o|3|o>|3|<o|0|o>>> :: Tree Integer
-- ex. Main> create_addition_tree [1,2,3,4]
--     <<<o|1|o>|3|<o|2|o>>|10|<<o|3|o>|7|<o|4|o>>> :: Tree Integer


------------------------------


-- Create "tree_fig_ord" function that receive one figure tree and it tell if:
-- all child have figures of higher area than figures of its nodes fathers

-- ex. Main> tree_fig_ord (Plant(Plant(Plant(Anil,Rectangle(2,4),Anil),Triangle(3,5),Anil),Circle 1,Anil))
--     True :: Bool 
-- ex. Main> tree_fig_ord (Plant(Plant(Plant(Anil,Rectangle(2,4),Anil),Triangle(3,5),Anil),Circle 1,Plant(Anil,Rectangle(1,3),Anil)))
--     False :: Bool


------------------------------


-- Implement "binary_tree" functions that transform one integer tree in one tree of binary numbers.


--  ex. Main> binary_tree (Plant(Plant(Anil,7,Plant(Anil,12,Anil)),3,Plant(Plant(Anil,43,Anil),5,Anil)))
--      <<o|"111"|<o|"1100"|o>>|"11"|<<o|"101011"|o>|"101"|o>> :: Tree [Char]


-- Implement "add_trees" functions that receive two integer trees and
--return resulting addition tree off add each node with analogous node of other tree.
-- In case that not exist one node in one position of a tree, we considerate its value is 0 (1.5 points)

-- ex         5                 3                       8
--          /   \             /   \                   /   \    
--         3     6     +     4     2        =        7     8    
--        / \   /           /     /  \              / \   / \  
--       2  4  1           7     2    1            9  4   3 1 

-- ex. Main> add_trees (Plant(Plant(Anil,2,Anil),4,Plant(Anil,3,Anil))) (Plant(Plant(Anil,4,Plant(Anil,1,Anil)),5,Anil))
--     <<o|6|<o|1|o>>|9|<o|3|o>> :: Tree Integer
